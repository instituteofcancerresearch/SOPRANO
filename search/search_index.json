{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SOPRANO","text":"<p>Selection On PRotein ANnotated regiOns</p> <p> </p> <p>The SOPRANO method was developed to quantify selection in specific regions of the genome. It calculates ON- and OFF-target dN/dS using a set of annotated somatic point mutations and a transcript coordinates file.</p> <p>This repository is a Python reimplementation of the original method with two main offerings:</p> <ol> <li>An application interface to easily pre-process the relevant input files.  </li> <li>A scalable command line utility to run the SOPRANO pipeline for dN/dS, serving local and high-performance computing environments, distributed over MPI.</li> </ol>"},{"location":"#quick-links","title":"Quick links","text":"<ul> <li> <p>Documentation is available on this site.</p> </li> <li> <p>Issues should be raised here.</p> </li> <li> <p>Reference the SOPRANO method with Zapata et al.</p> </li> <li> <p>View the original repository here.</p> </li> </ul>"},{"location":"NOTES/","title":"Notes before running","text":"<ul> <li> <p>No header needed for input VEP file.</p> </li> <li> <p>VEP annotated first column must be in the format (chr_pos_ref/alt) as described here.</p> </li> <li> <p>VEP annotated file must only have chromosomes that are 1,2,3,4...22 or uppercase X,Y.</p> </li> <li> <p>After you run vep with the option for ExAC frequencies, it would be necessary to remove all variants present in more than 0.1 percent of the population. You could filter for this condition with the command</p> </li> </ul> <p>Deprecated command</p> <ul> <li> <p>The genome file used in SOPRANO or SSB is a two column file that contains the info of the name of the fasta id (column 1) and the length of that sequence (column 2).</p> </li> <li> <p>The UNIX system used should be able to recognize <code>\\t</code> as a tab separator, some encodings may have problems on recognizing special characters.</p> </li> <li> <p>Genome length file is a two column file specifying the fasta id and the length of the sequence (see how to obtain it at the bottom).</p> </li> <li> <p>Restrict your input dataset to chromosomes 1-22 and X and Y. Remove the rest.</p> </li> <li> <p>Input chromosome number must coincide with reference genome and annotation (chr1 vs 1).</p> </li> </ul>"},{"location":"NOTES/#limitations","title":"Limitations","text":"<ul> <li> <p>SOPRANO will fail if there are 0 synonymous mutations inside the immunopeptidome.</p> </li> <li> <p>Results must be taken cautiously when low number of synonymous mutations inside the immunopeptidome. See tutorial where we show the dependency of synonymous events versus the confidence interval length. In brief, one synonymous mutation in the immunopeptidome leads to a confidence interval length of ~0.6 and an 85% of misclassified cases.</p> </li> <li> <p>Only mutations in those transcript IDs present on the immunopeptidome file will be used to estimate ON and OFF dN/dS. The rest of mutations will be discarded.</p> </li> <li> <p>SOPRANO can use mutations in intronic regions when using whole genome sequencing data to improve the estimate of the neutral mutation rate of the gene. However, this strategy is experimental since not every study will have information on all possible mutations falling into intronic regions (the length of the intronic region was estimated using hg19 reference).</p> </li> </ul>"},{"location":"app_overview/","title":"SOPRANO App","text":"<p>SOPRANO has a browser-based user interface powered by <code>streamlit</code>. This can be deployed from the command line via <code>soprano-app</code>. This will present the user with a visual way of interacting with the CLI utilities. It also offers a light-weight version of the pipeline; though this is restricted to single-sample pipeline runs, with no KDE as described in the CLI.</p>"},{"location":"app_overview/#data-sources","title":"Data sources","text":"<p>By default, the application will serve options for the example annotated mutation and immunopeptidome files shipped with SOPRANO. Additional files can be detected by the application by their placement in the <code>./app_sources</code> folders:</p> <code>./app_sources/annotated_inputs</code> <p>VEP annotated mutation files placed in this directory will be detected, so long as they have the extension pattern <code>*anno*</code>. E.g., <code>mutations.anno</code> or <code>mutations.annotated</code>.</p> <code>./app_sources/immunopeptidomes</code> <p>User defined immunopeptidomes BED files placed in this directory will be detected, so long as they have the extension <code>.bed</code>. E.g., <code>immuno.bed</code>.</p> <code>./app_sources/coordinate_files</code> <p>User defined BED files that can be used for randomization will be detected, so long as they have the extension <code>.bed</code>. E.g., <code>randoms.bed</code>.</p> <p>Note: Quantities generated on-the-fly during an app session will be cached into these folders.</p>"},{"location":"app_overview/#serving-the-application-via-docker","title":"Serving the application via Docker","text":"<p>The application can also be constructed as a docker image, and served more generally this way. This can be manually constructed from the repository root via</p> <pre><code>docker build -t soprano .\n</code></pre> <p>To interact with data sources, users should bind mount whilst running the application, for example, with</p> <pre><code>docker run -d -p 8501:8501 --name SOPRANO_APP -v \"$(pwd)\"/ensembl_downloads:/app/ensembl_downloads soprano\n</code></pre>"},{"location":"app_overview/#public-content","title":"Public content","text":"<p>Alternatively, there is a publicly available image that can be pulled down directly, and executed in the same way. A version of this application is running at the ICR that you can view here.</p>"},{"location":"app_overview/#notes-on-the-containerized-app","title":"Notes on the containerized app","text":"<p>Data in general will not persist between sessions. For example, an annotated mutation file will not be saved directly onto your file system. Users are therefore encouraged to download any results that they want to use via the appropriate buttons.</p>"},{"location":"installation/","title":"Installation","text":"<p>SOPRANO is compatible with Linux and MacOS. It is primarily written in Python, but supplemented by some R, Perl, Bash, and bioinformatic utilities; such as bedtools.</p> <p>Due to the variety of languages, SOPRANO is installed inside a conda environment. Note that this requires an existing Anaconda download, or alternative variant, such as Mamba; a highly efficient re-implementation.</p>"},{"location":"installation/#automatic-installation","title":"Automatic installation","text":"<p>Users with Anaconda, or Mamba, available on their system can attempt an automated installation from their command line:</p> <pre><code>. setup.sh &lt;flavour&gt;\n</code></pre> <p>The flavour of the installation is optional, and may be omitted. Currently available options are:</p> <ul> <li><code>mpi</code> - recommended for CLI users who user and HPC installations.</li> <li><code>dev</code> - for developers; who are further recommended to <code>pre-commit install</code>   hooks for standardized static analysis before CI.</li> </ul> <p>Some users have reported issues with the automatic installation, in particular on macOS systems. If you experience problems, please refer to the manual installation. Pull requests in this area are highly welcome.</p>"},{"location":"installation/#manual-installation","title":"Manual installation","text":"<p>This installation guide assumes that users are in the repository root.</p> <ol> <li> <p>Create and activate a host conda environment <pre><code>conda create --name soprano\nconda activate soprano\n</code></pre></p> <ol> <li> <p>Mac <pre><code>conda config --env --set subdir osx-64\nconda env update ---file env.yml\n</code></pre></p> </li> <li> <p>Linux <pre><code>conda env update --file env.yml\n</code></pre></p> </li> </ol> </li> <li> <p>Install R GitHub package dependencies <pre><code>Rscript install_R_pkgs.R\n</code></pre></p> </li> <li> <p>Install Python package and corresponding dependencies <pre><code>pip install -e .[&lt;flavour&gt;]\n</code></pre></p> </li> <li> <p>Decompress transcript files <pre><code>gunzip -k data/aux_soprano/*.gz\n</code></pre></p> </li> </ol>"},{"location":"installation/#validate-your-installation","title":"Validate your installation","text":"<p>After completing either installation procedure, users are encouraged to run the installation tests, via</p> <pre><code>pytest -s tests/test_installation.py\n</code></pre> <p>All tests should pass.</p>"},{"location":"statistics/","title":"Statistics","text":"<p>SOPRANO produces two sets of statistical constraints on the dN/dS values computed by the pipeline.</p>"},{"location":"statistics/#analytic-estimates","title":"Analytic estimates","text":"<p>For each pipeline run, there is an analytic estimate of confidence intervals (68 and 98 percentiles) and p-value. This uses Katz analytic method of estimating the confidence intervals, which can then be used to estimate a pvalue. (For example, see this reference.)</p>"},{"location":"statistics/#numerical-estimates","title":"Numerical estimates","text":"<p>SOPRANO computes dN/dS based on the inclusion/exclusion of genomic regions defined by an input bed protein file.</p> <p>If we instead randomize these regions before executing the pipeline, the downstream results can be interpreted as a null hypothesis simulation.</p> <p>By randomizing and running the SOPRANO pipeline we are effectively drawing a \"sample\" from the unknown distribution of null hypothesis dN/dS values. By building an ensemble of many samples, it is therefore possible to build a kernel density estimate (KDE) from the empirical distribution.</p> <p>Once the kernel has been estimated, it is possible to assess the statistical significance of the non-randomized dN/dS result. A p-value can be computed by direct integration from the asymptotic tail of the kernel up until the observed non-randomized dN/dS value(s).</p>"},{"location":"statistics/#the-gaussian-kernel","title":"The Gaussian kernel","text":"<p>The kernel is derived by applying a Gaussian kernel to the distribution of dN/dS from null hypothesis simulations. The kernel itself is computed with <code>scikit-learn</code>, for which we apply a grid search to find an optimal bandwidth for the window function.</p> <p>By default, the grid bandwidth search is performed in 250 logarithmic spaces between -3 and 10. This is fairly sensible given the order-of-magnitudes one might expect for dN/dS in ON and OFF target regions.</p> <p>These values can be adjusted at runtime via setting the environment variables:</p> <ul> <li><code>SOPRANO_CV_LOG_MIN</code> - Base10 log value for minimum bandwidth.</li> <li><code>SOPRANO_CV_LOG_MAX</code> - Base10 log value for maximum bandwidth.</li> <li><code>SOPRANO_CV_LOG_STEPS</code> - Number of linear spaces in log space.</li> </ul>"},{"location":"statistics/#integration-parameters","title":"Integration parameters","text":"<p>Once the kernel has been determined, one needs to determine the lower and upper bounds for the integration from which, p-values are computed.</p> <p>Based on the spread of dN/dS values from the null distribution, a step distance is defined as some percentage of that spread. To determine the integration bounds, the kernel is estimated iteratively by \"stepping\" away from distribution maximum/minimum, until the absolute and relative difference of the kernel evaluated at that step is below a critical threshold. These values define the lower and upper bounds for the integration. The integration itself is performed with the SciPy <code>quad</code> integrator.</p> <p>By default, SOPRANO walks away from the null distribution in 1% steps; until the absolute and relative difference between steps is &lt; 1e-8. This will continue for no more than 1000 steps.</p> <p>These values can be adjusted at runtime via setting the environment variables:</p> <ul> <li><code>SOPRANO_KDE_ABS_TOL</code> - The absolute tolerance for convergence.</li> <li><code>SOPRANO_KDE_REL_TOL</code> - The relative tolerance for convergence.</li> <li><code>SOPRANO_KDE_STEP_PCT</code> - Percentage of distributions spread to use as a step.</li> <li><code>SOPRANO_KDE_MAX_ITER</code> - Maximum number of iterations before termination.</li> </ul>"},{"location":"cli/cli_overview/","title":"CLI Overview","text":"<p>The SOPRANO CLI contains utilities for pipeline execution, in addition to several utilities for preparing the necessary data inputs files.</p>"},{"location":"cli/cli_overview/#core-executables","title":"Core executables","text":"<ul> <li> <p><code>soprano-run</code> Execute the SOPRANO pipeline to compute dN/dS, based on a choice of input files and parameter choices.</p> </li> <li> <p><code>soprano-app</code> Deploy the SOPRANO user interface to your local browser: run utilities and a light-weight version of the pipeline.</p> </li> </ul>"},{"location":"cli/cli_overview/#additional-utilities","title":"Additional utilities","text":"<ul> <li> <p><code>soprano-link-vep</code> Link a VEP cache containing genome reference files to the SOPRANO data folders.</p> </li> <li> <p><code>soprano-annotate</code> Annotate VCF files that can be handled by SOPRANO, describing somatic mutations.</p> </li> <li> <p><code>soprano-get-genome</code> Download an ensembl VEP genome reference file from the ensembl FTP server.</p> </li> <li> <p><code>soprano-hla2ip</code> Prepare an immunopeptidome file based a discrete choice of HLA; and optional transcript constraints.</p> </li> </ul>"},{"location":"cli/soprano-annotate/","title":"Mutation annotations","text":"<p>SOPRANO has a specific format which is required to describe somatic mutations.</p> <p>The format is most easily derived from a VCF file, or collection of VCF files. Users should use</p> <pre><code>soprano-annotate [-h] [--source SOURCE_PATH] [--output OUTPUT_NAME] [--cache CACHE_DIR] [--assembly ASSEMBLY]\n</code></pre> <code>-h | --help</code> <p>Get help message.</p> <code>-s | --source</code> <p>Provide the path to a single VCF file, or a directory containing VCF files.</p> <code>-o | --output</code> <p>Provide a name for the output file. If not provided, when applied to as single input file, will default to the input file name with a <code>.anno</code> extension. If multiple files are selected (via prescribing a directory), this will field is required.</p> <code>-d | --cache</code> <p>Provide a path to a directory to cache the output inside of. Defaults to <code>/app_sources/annotated_inputs</code>.</p> <code>-a | --assembly</code> <p>Provide a genome assembly that is compatible with the input VCF source files. By default, this assumed to be GRCh38.</p>"},{"location":"cli/soprano-get-genome/","title":"Genome reference downloader","text":"<p>SOPRANO has a built-in genome reference downloader, that retrieves data directly from the Ensembl ftp servers. This means that SOPRANO users do not need to configure VEP, for example.</p> <p>Users can execute the utility via</p> <pre><code>soprano-get-genome [-h] [--species SPECIES] [--assembly ASSEMBLY] [--release RELEASE] [--primary_assembly] [--download_only]\n</code></pre> <code>-h | --help</code> <p>Get info on how to use this executable</p> <code>-s | --species</code> <p>Ensembl species Latin name. (default: homo_sapiens)</p> <code>-a | --assembly</code> <p>Ensembl genome assembly ID. (default: GRCh38)</p> <code>-r | --release</code> <p>Ensembl release number. (default: 110)</p> <code>-d | --download_only</code> <p>Don't decompress and compute fasta index file.</p> <p>Downloads will be cached into the folder <code>ensembl_downloads/SPECIES/RELEASE</code>. This mimics the VEP downloads structure. This is deliberate: users who readily have genome references downloaded on their local laptop can leverage the <code>soprano-link-vep</code> utility to crete a soft link to existing data in this directory, which can then be used by SOPRANO.</p>"},{"location":"cli/soprano-hla2ip/","title":"Immunopeptidome builder","text":"<p>Users can build a custom immunopeptidome file based on a selection of HLA alleles. This can be further refined by restricting or excluding Ensembl transcript IDs.</p> <pre><code>soprano-hla2ip [-h] --alleles HLA_VALUES [HLA_VALUES ...] --output OUTPUT_ID [--cache CACHE_DIR] [--restrict [RESTRICTED_TRANSCRIPT_IDS ...]] [--excluded [EXCLUDED_TRANSCRIPT_IDS ...]]\n</code></pre> <code>-h | --help</code> <p>Get help message</p> <code>-a | --alleles</code> <p>1 to 6 space separated HLA alleles, e.g., <code>HLA-A0201 HLA-A0101 HLA-C0701</code></p> <code>-o | --output</code> <p>Name of the output immunopeptidome bed file. No extension required.</p> <code>-c | --cache</code> <p>Cache location of the output file. Defaults to <code>app_sources/immunopeptidomes</code></p> <code>-r | --restricted</code> <p>Space separated list of Ensembl transcript IDs to limit immunopeptidome to.</p> <code>-e | --excluded</code> <p>Space separated list of Ensembl transcript IDs to exclude from immunopeptidome.</p>"},{"location":"cli/soprano-link-vep/","title":"VEP cache","text":"<p>Genome reference files can consume large amounts of storage. Many users of SOPRANO may have existing VEP caches with genome references therein, that could be used directly by SOPRANO.</p> <p>To this end, users can link their existing reference files to the SOPRANO Ensembl downloads folder <code>ensembl_downloads/</code>.</p> <p>Users should run:</p> <pre><code>soprano-link-vep [-h] [--cache SRC_CACHE]\n</code></pre> <code>-h | --help</code> <p>Get help output</p> <code>-c | --cache</code> <p>Provide the path to the ensembl vep cache. (default: /home/USER/.vep)</p> <p>The cache argument is useful if you have cached VEP data into a non-standard location.</p>"},{"location":"cli/soprano-run/examples/","title":"Examples","text":"<p>In these examples, we run SOPRANO with SSB7. We will use the readily available example annotated somatic mutation and bed protein input files shipped with SOPRANO. These inputs are compatible with the GRCh37 reference genome. We will seed the value of the simulations such that the outputs described on this page can be reproduced on your own computer.</p> <p>The main entry point for executing the soprano pipeline is <code>soprano-run</code>.</p> <p>Note: If you have installed SOPRANO with the <code>mpi</code> or <code>dev</code> flavours, you can prefix this with your appropriate MPI executable and processor count. For example, <code>mpirun -n X</code>, <code>mpiexec -n X</code>, <code>srun -n X --pmix</code>, and so on; for distribution over <code>X</code> processors.</p>"},{"location":"cli/soprano-run/examples/#example-1-dnds-with-analytic-approximations-to-uncertainty","title":"Example 1: dN/dS with analytic approximations to uncertainty","text":"<p>The most straightforward analysis involves running SOPRANO against a single file, to compute dN/dS and estimate the statistical uncertainty via Katz method.</p> <p>In this case, one can execute <code>soprano-run @example_01.soprano</code></p> example_01.soprano<pre><code>--input=/path/to/SOPRANO/data/example_annotations/TCGA-05-4396-01A-21D-1855-08.annotated\n--bed_file=/path/to/SOPRANO/data/example_immunopeptidomes/TCGA-05-4396.Expressed.IEDBpeps.SB.epitope.bed\n--name=TCGA-05-4396-example_01\n--output=/tmp\n--assembly=GRCh37\n</code></pre> <p>This will cache the results into the output directory <code>/tmp/TCGA-05-4396-example_01</code>. There should only be a single sub-folder, <code>data</code>. The results from this analysis are then inside the file <code>/tmp/TCGA-05-4396-example_01/data/data.results.tsv</code>.</p> Coverage ON_dnds ON_Low_CI ON_High_CI ON_Mutations OFF_dNdS OFF_Low_CI OFF_High_CI OFF_Mutations Pvalue ON_na ON_NA ON_ns ON_NS OFF_na OFF_NA OFF_ns OFF_NS Exonic_Only 0.17320730117340286 0.031724321858695226 0.9456709370621603 6.0 0.866868735958057 0.49699058713838856 1.5120234161945458 63.0 0.34485641679719375 2.0 1027780.0 4.0 356038.0 46.0 10627300.0 17.0 3404610.0 Exonic_Intronic 0.17320730117340286 0.031724321858695226 0.9456709370621603 6.0 0.866868735958057 0.49699058713838856 1.5120234161945458 63.0 0.34485641679719375 2.0 1027780.0 4.0 356038.0 46.0 10627300.0 17.0 3404610.0"},{"location":"cli/soprano-run/examples/#example-2-dnds-with-numerical-estimates-of-uncertainty","title":"Example 2: dN/dS with numerical estimates of uncertainty","text":"<p>Alternative statistical measures on the significand of dN/dS can be obtained via generating a suite of null hypothesis simulations from randomization of the bed protein genomic background. In this case, we should specify some number of samples to the SOPRANO definition file</p> <p>In this case, one can execute <code>soprano-run @example_02.soprano</code></p> example_01.soprano<pre><code>--input=/path/to/SOPRANO/data/example_annotations/TCGA-05-4396-01A-21D-1855-08.annotated\n--bed_file=/path/to/SOPRANO/data/example_immunopeptidomes/TCGA-05-4396.Expressed.IEDBpeps.SB.epitope.bed\n--name=TCGA-05-4396-example_02\n--output=/tmp\n--assembly=GRCh37\n--seed=333\n--n_samples=19\n</code></pre> <p>This will cache the results into the output directory <code>/tmp/TCGA-05-4396-example_02</code>. There should be the same content as generated in the previous example, in addition to a statistical summary file from in addition to an automatically generated an accompanying <code>figure.pdf</code> file.</p> statistics.json<pre><code># Placeholder\n{\n    \"ON_dNdS\": {\n        \"exonic_only\": {\n            \"samples\": {\n                \"mean_value\": 0.7721069499148594,\n                \"std_dev\": 0.04871517355356516\n            },\n            \"data\": {\n                \"value\": 0.7028932965124453,\n                \"p_value_left\": 0.08982714832397816,\n                \"p_value_right\": 0.9101728516236403\n            }\n        }\n    },\n    \"OFF_dNdS\": {\n        \"exonic_only\": {\n            \"samples\": {\n                \"mean_value\": 0.8301892065970186,\n                \"std_dev\": 0.004196696763633817\n            },\n            \"data\": {\n                \"value\": 0.837001816221436,\n                \"p_value_left\": 0.9487837348903762,\n                \"p_value_right\": 0.05121626510654794\n            }\n        }\n    }\n}\n</code></pre> <p></p>"},{"location":"cli/soprano-run/inputs/","title":"Input arguments","text":"<p>The SOPRANO pipeline can be run from the command line with <code>soprano-run</code>. Arguments can be passed explicitly via their flag-to-value definitions, or within an argument definition file.</p>"},{"location":"cli/soprano-run/inputs/#argument-definitions","title":"Argument definitions","text":""},{"location":"cli/soprano-run/inputs/#required-arguments","title":"Required arguments","text":"<p>These arguments have short (<code>-s</code>) or long (<code>--long</code>) argument flags.</p> <code>-n | --name</code> The name of the SOPRANO pipeline run. <code>-o | --output</code> The path to the output file directory (i.e. the cache) for the SOPRANO pipeline run. <code>-i | --input</code> The path to the input VEP annotated file that defines mutations. <code>-b | --bed_file</code> The path to the bed file containing protein coordinates named by their transcript ID (e.g. ENSTXXXXXX 123 135)"},{"location":"cli/soprano-run/inputs/#optional-arguments","title":"Optional arguments","text":"<p>These arguments have short (<code>-s</code>) or long (<code>--long</code>) argument flags.</p> <code>-m | --random_regions</code> The path to the bed file that defines regions for randomization. Defaults to None, implying arbitrary randomization. <code>-x | --seed</code> The seed value to be used in randomization process. If defined, users should be able to reproduce their results when randomization is applied. This value should be an integer greater than zero. Defaults to \"-1\", implying no seed value chosen. <code>-s | --species</code> The Latin species name associated with genome reference. The default value is for homo_sapiens. <code>-a | --assembly</code> The name of the Ensembl reference genome assembly. The default value is for GRCh38 (Homo Sapiens). <code>-r | --release</code> The Ensembl release number of the genome reference file. The default value is 110. <code>-t | --transcript</code> Path to transcript lengths. <code>-p | --protein_transcript</code> Path to protein transcript lengths. <code>-f | --fasta</code> Path to ensembl transcript IDs (fasta file)."},{"location":"cli/soprano-run/inputs/#optional-switches","title":"Optional switches","text":"<p>These switches are activated by passing the long (<code>--long</code>) flag to the command line with no subsequent argument. They alter the runtime behaviour of SOPRANO.</p> <code>--use_random</code> Run SOPRANO with randomization. Note that if <code>random_regions</code> are passed, to the CLI, this overrides the selection to <code>use_random</code> to <code>True</code>. <code>--use_ssb192</code> Run SOPRANO using SSB192 substitutions, otherwise defaults SSB7. <code>--keep_drivers</code> Run SOPRANO with driver genes included. Otherwise, <code>data/aux_soprano/genes2exclude.txt</code> are excluded."},{"location":"cli/soprano-run/outputs/","title":"Outputs","text":"<p>The SOPRANO CLI caches data into the folder <code>&lt;job_cache&gt;/&lt;job_name&gt;</code>, where the job cache and name are determined from the argument flags <code>-o | --output</code> and <code>-n | --name</code> respectively.</p> <p>A SOPRANO pipeline cache has the following structure</p> n_samples=2 file tree<pre><code>job_cache\n\u2502   figure.pdf\n\u2502   pipeline.params\n\u2502   samples_df.csv\n\u2502   samples_df.meta\n\u2502   statistics.json\n\u2502   kde_config.json\n\u2502\n\u2514\u2500\u2500\u2500data\n\u2502   \u2502   data.log\n\u2502   \u2502   data.results.tsv    \n\u2502   \u2502   intermittent.data.tar.gz    \n\u2502\n\u2514\u2500\u2500\u2500sample_0000\n\u2502   \u2502   sample_0000.results.log\n\u2502   \u2502   sample_0000.results.tsv\n\u2502   \u2502   intermittent.data.tar.gz\n\u2502\n\u2514\u2500\u2500\u2500sample_0001\n\u2502   \u2502   sample_0000.results.log\n\u2502   \u2502   sample_0000.results.tsv\n\u2502   \u2502   intermittent.data.tar.gz\n</code></pre> <p>Each data or sample component of the analysis will have its own subdirectory, containing its own log file. If the job is in progress, each pipeline step will have its intermittent data cached therein. Once the sample pipeline job has complete, intermittent cache data will be tar compressed into a <code>*.tar.gz</code> file, leaving only the log and results file.</p> <p>There are three classificatoins of outputs that we will describe in term:</p> <ol> <li>Universal outputs - These are always generated by a SOPRANO pipeline    run, and cannot be changed after they are created.</li> <li>Pipeline outputs - These are generated for each SOPRANO pipeline    run. Once created, these will not be overwritten or deleted. More pipeline    runs can be generated via launching more samples.</li> <li>KDE outputs - These will be overwritten each time SOPRANO is run. They    are relatively quick to compute on-the-fly, and are determined by the KDE    parameters and number of samples defined.</li> </ol>"},{"location":"cli/soprano-run/outputs/#universal-outputs","title":"Universal outputs","text":""},{"location":"cli/soprano-run/outputs/#pipelineparams","title":"<code>pipeline.params</code>","text":"<p>This file describes the pipeline jobs parameters will be written to the root of this folder. The function of this file is two-fold:</p> <ol> <li>Users can refer to this file to    contextualize results;</li> <li>SOPRANO can use this file to ensure that only pipeline definitions with    identical inputs can be cached in the same location.</li> </ol> <p>Note: Whilst these definitions ensure that conflicting data may not be written to the same place, it does not forbid difference in <code>n_samples</code>. This means that users can iteratively scale up their analysis as and when needed.</p> <p>An example <code>pipeline.params</code> file is displayed below. Note that whilst these definitions ensure that conflicting data may not be written to the same place, it does not forbid difference in <code>n_samples</code>. This means that users can iteratively scale up their analysis as and when needed.</p> pipeline.params<pre><code>{\n    \"bed_path\": \"/path/to/SOPRANO/data/example_immunopeptidomes/TCGA-05-4396.Expressed.IEDBpeps.SB.epitope.bed\",\n    \"exclude_drivers\": \"True\",\n    \"fasta\": \"/path/to/SOPRANO/ensembl_downloads/homo_sapiens/110_GRCh37/Homo_sapiens.GRCh37.dna.toplevel.fa\",\n    \"input_path\": \"/path/to/SOPRANO/data/example_annotations/TCGA-05-4396-01A-21D-1855-08.annotated\",\n    \"job_cache\": \"/tmp/test_333\",\n    \"protein_transcript_length\": \"/path/to/SOPRANO/data/aux_soprano/ensemble_transcript_protein.length\",\n    \"random_regions\": \"None\",\n    \"seed\": \"333\",\n    \"sizes\": \"/path/to/SOPRANO/ensembl_downloads/homo_sapiens/110_GRCh37/Homo_sapiens.GRCh37.dna.toplevel.chrom\",\n    \"transcript_fasta\": \"/path/to/SOPRANO/data/aux_soprano/ensemble_transcriptID.fasta\",\n    \"transcript_length\": \"/path/to/SOPRANO/data/aux_soprano/ensemble_transcript.length\",\n    \"use_ssb192\": \"False\"\n}\n</code></pre>"},{"location":"cli/soprano-run/outputs/#pipeline-outputs","title":"Pipeline outputs","text":""},{"location":"cli/soprano-run/outputs/#log","title":"<code>*.log</code>","text":"<p>This is the log file for the individual SOPRANO pipeline runs.</p>"},{"location":"cli/soprano-run/outputs/#resultstsv","title":"<code>*.results.tsv</code>","text":"<p>Each data/sample will produce a TSV file in the following format:</p> Coverage ON_dnds ON_Low_CI ON_High_CI ON_Mutations OFF_dNdS OFF_Low_CI OFF_High_CI OFF_Mutations Pvalue ON_na ON_NA ON_ns ON_NS OFF_na OFF_NA OFF_ns OFF_NS Exonic_Only Exonic_Intronic <p>Only first row (<code>Exonic_Only</code>) of the table data will be generated if there are non-zero intronic rate of mutations. The SOPRANO algorithm uses intronic mutations to improve the background counts of silent mutations.</p> <p>The empirical counts of mutation numbers are computed on the fly by the SOPRANO pipeline. Statistical quantities placed in this table are analytic estimates based on the empirical mutation counts using Katz method.</p> <ul> <li> <p><code>ON_dnds</code> dN/dS of the target region provided in the bed file</p> </li> <li> <p><code>ON_lowci</code> lower value for the 95% CI of the target</p> </li> <li> <p><code>ON_highci</code> upper value for the 95% CI of the target</p> </li> <li> <p><code>ON_muts</code> number of mutations observed inside the target region</p> </li> <li> <p><code>OFF_dnds</code> dN/dS of the OFF-target region provided in the bed file</p> </li> <li> <p><code>OFF_lowci</code> lower value for the 95% CI of the OFF-target</p> </li> <li> <p><code>OFF_highci</code> upper value for the 95% CI of the OFF-target</p> </li> <li> <p><code>OFF_muts</code> number of mutations observed outside the target region</p> </li> <li> <p><code>P-val</code> P-value estimated from the comparison of the confidence intervals   from ON and OFF dN/dS values</p> </li> <li> <p><code>ON_na</code> Observed number of nonsilent mutations ON target</p> </li> <li> <p><code>ON_NA</code> Number of nonsilent sites (corrected) ON target</p> </li> <li> <p><code>ON_ns</code> Observed number of silent mutations ON target</p> </li> <li> <p><code>ON_NS</code> Number of silent sites (corrected) ON target</p> </li> <li> <p><code>OFF_na</code> Observed number of nonsilent mutations OFF target</p> </li> <li> <p><code>OFF_NA</code> Number of nonsilent sites (corrected) OFF target</p> </li> <li> <p><code>OFF_ns</code> Number of silent sites (corrected) OFF target</p> </li> <li> <p><code>OFF_NS</code> Number of silent sites (corrected) OFF target</p> </li> </ul>"},{"location":"cli/soprano-run/outputs/#intermittentdatatargz","title":"<code>intermittent.data.tar.gz</code>","text":"<p>Compressed tar archive containing the intermittent data produced by the SOPRANO pipeline run for the data/sample.</p>"},{"location":"cli/soprano-run/outputs/#kde-outputs","title":"KDE outputs","text":"<p>When the number of samples <code>--n_samples</code> is specified and non-zero, SOPRANO performs a kernel density estimate based on the sample files. This is the bases of a numerical downstream analysis that produces an additional set of files.</p>"},{"location":"cli/soprano-run/outputs/#figurepdf","title":"<code>figure.pdf</code>","text":"<p>A figure containing histogram data of the samples, overlayed by the corresponding kernel densities, with vertical markers for the data dN/dS values.</p>"},{"location":"cli/soprano-run/outputs/#samples_dfcsv","title":"<code>samples_df.csv</code>","text":"<p>A vertical concatenation of the sample outputs used to estimate the kernel density. It pulls from the <code>sample_XXXX.results.tsv</code> files.</p>"},{"location":"cli/soprano-run/outputs/#samples_dfmeta","title":"<code>samples_df.meta</code>","text":"<p>Contains the meta regarding which sample results were used to esimtate the KDE.</p>"},{"location":"cli/soprano-run/outputs/#kde_configjson","title":"<code>kde_config.json</code>","text":"<p>The parameters used to perform the KDE. This defines an explicit record of the parameter space search to fit the Gaussian kernel, and the parameters used to integrate the KDE to obtain pvalues.</p>"},{"location":"cli/soprano-run/outputs/#statisticsjson","title":"<code>statistics.json</code>","text":"<p>Contains the statistical inferences from the samples and kernel density estimates. The general structure is given below. The<code>intronic_only</code> key and subsequent value definitions will only exist if they are found in the data.</p> <p>The <code>samples</code> key contains summary statistics from the samples, namely their mean dN/dS values and standard deviation.</p> <p>The <code>data</code> key contains the dN/dS value for the non-randomized input run through SOPRANO. The <code>p_value_left</code> and <code>p_value_right</code> values are computed by integrating the kernel density from left and right tails respectively, up until the data dN/dS prediction.</p> statistics.json<pre><code>{\n  \"ON_dNdS\": {\n    \"exonic_only\": {\n      \"samples\": {\n        \"mean_value\": ...,\n        \"std_dev\": ...\n      },\n      \"data\": {\n        \"value\": ...,\n        \"p_value_left\": ...,\n        \"p_value_right\": ...\n      }\n    },\n    \"exonic_intronic\": {\n      \"samples\": {\n        \"mean_value\": ...,\n        \"std_dev\": ...\n      },\n      \"data\": {\n        \"value\": ...,\n        \"p_value_left\": ...,\n        \"p_value_right\": ...\n      }\n    }\n  },\n  \"OFF_dNdS\": {\n    \"exonic_only\": {\n      \"samples\": {\n        \"mean_value\": ...,\n        \"std_dev\": ...\n      },\n      \"data\": {\n        \"value\": ...,\n        \"p_value_left\": ...,\n        \"p_value_right\": ...\n      }\n    },\n    \"exonic_intronic\": {\n      \"samples\": {\n        \"mean_value\": ...,\n        \"std_dev\": ...\n      },\n      \"data\": {\n        \"value\": ...,\n        \"p_value_left\": ...,\n        \"p_value_right\": ...\n      }\n    }\n  }\n}\n</code></pre>"}]}